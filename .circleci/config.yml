# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
import random

def guess_the_number():
    high_score = float('inf')
    play_again = True

    while play_again:
        difficulty = choose_difficulty()

        random_number = random.randint(difficulty['min'], difficulty['max'])
        number_of_attempts = 0

        print("\nWelcome to Guess the Number - {}!".format(difficulty['name']))
        print("I've selected a random number between {} and {}. Can you guess it?".format(difficulty['min'], difficulty['max']))

        while True:
            number_of_attempts += 1

            guess = get_user_input("Enter your guess (or 'q' to quit): ")

            if guess == 'q':
                print("Thanks for playing!")
                return
            try:
                guess = int(guess)
            except ValueError:
                print("Invalid input. Please enter a valid number or 'q' to quit.")
                continue

            if guess == random_number:
                print("Congratulations! You've guessed the correct number ({}) in {} attempts.".format(random_number, number_of_attempts))
                if number_of_attempts < high_score:
                    high_score = number_of_attempts
                    print("New High Score: {} attempts!".format(high_score))
                break
            elif guess < random_number:
                print("Try higher!")
            else:
                print("Try lower!")

        print("Your score for this round is {} attempts.".format(number_of_attempts))
        print("High Score: {} attempts".format(high_score))
        play_again = input("Do you want to play again? (yes/no) ").lower() == 'yes'

    print("Thanks for playing Guess the Number!")

def choose_difficulty():
    print("Choose a difficulty level:")
    print("1. Easy (1-50)")
    print("2. Medium (1-100)")
    print("3. Hard (1-500)")

    while True:
        choice = input("Enter the number of your choice: ")
        if choice == '1':
            return {'name': 'Easy', 'min': 1, 'max': 50}
        elif choice == '2':
            return {'name': 'Medium', 'min': 1, 'max': 100}
        elif choice == '3':
            return {'name': 'Hard', 'min': 1, 'max': 500}
        else:
            print("Invalid choice. Please enter a valid option.")

def get_user_input(prompt):
    user_input = input(prompt)
    return user_input

# Start the game
guess_the_number()
